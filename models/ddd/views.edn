;;;;
;;;; Example for Domain Driven Design with a Hexagonal Architecture
;;;;
#{;;;
  ;;; Concept Model Views
  ;;;
  {:el :concept-view
   :id :ddd/concept-view
   :spec {:include :relations
          :layout :left-right
          ;:graphviz {:engine :neato}
          :markdown {:references true}}
   :title "Concept Map of the Domain Driven Design Patterns"
   :ct [;;
        ;; Concepts
        ;;
        {:ref :ddd/c-aggregates}
        {:ref :ddd/c-anti-corruption-layer}
        {:ref :ddd/c-big-ball-of-mud}
        {:ref :ddd/c-bounded-context}
        {:ref :ddd/c-clean-architecture}
        {:ref :ddd/c-conformist}
        {:ref :ddd/c-context-map}
        {:ref :ddd/c-continuous-integration}
        {:ref :ddd/c-core-domain}
        {:ref :ddd/c-customer-supplier}
        {:ref :ddd/c-domain-events}
        {:ref :ddd/c-entities}
        {:ref :ddd/c-factories}
        {:ref :ddd/c-generic-subdomains}
        {:ref :ddd/c-model-driven-design}
        {:ref :ddd/c-open-host-service}
        {:ref :ddd/c-partnership}
        {:ref :ddd/c-published-language}
        {:ref :ddd/c-repositories}
        {:ref :ddd/c-separate-ways}
        {:ref :ddd/c-services}
        {:ref :ddd/c-shared-kernel}
        {:ref :ddd/c-ubiquitous-language}
        {:ref :ddd/c-value-objects}]}

  {:el :glossary-view
   :id :ddd/glossary-view
   :spec {:markdown {:references true}}
   :title "Concept Map of the Domain Driven Design Patterns"
   :ct [;;
          ;; Concepts
          ;;
        {:ref :ddd/c-aggregates}
        {:ref :ddd/c-anti-corruption-layer}
        {:ref :ddd/c-big-ball-of-mud}
        {:ref :ddd/c-bounded-context}
        {:ref :ddd/c-clean-architecture}
        {:ref :ddd/c-conformist}
        {:ref :ddd/c-context}
        {:ref :ddd/c-context-map}
        {:ref :ddd/c-continuous-integration}
        {:ref :ddd/c-core-domain}
        {:ref :ddd/c-customer-supplier}
        {:ref :ddd/c-domain}
        {:ref :ddd/c-domain-events}
        {:ref :ddd/c-entities}
        {:ref :ddd/c-factories}
        {:ref :ddd/c-generic-subdomains}
        {:ref :ddd/c-model}
        {:ref :ddd/c-model-driven-design}
        {:ref :ddd/c-open-host-service}
        {:ref :ddd/c-partnership}
        {:ref :ddd/c-published-language}
        {:ref :ddd/c-repositories}
        {:ref :ddd/c-separate-ways}
        {:ref :ddd/c-services}
        {:ref :ddd/c-shared-kernel}
        {:ref :ddd/c-ubiquitous-language}
        {:ref :ddd/c-value-objects}]}

  ;;; Architecture Model Views (C4)
  {:el :context-view
   :id :ddd/system-context-view
   :title "System Context View of a Hexagonal Architecture"
   :ct [{:ref :ddd/system}]}
  
  {:el :container-view
   :id :ddd/container-view
   :title "Container View of a Hexagonal Arcitecture"
   :ct [{:ref :ddd/system}]}

  {:el :component-view
   :id :ddd/component-view
   :title "Component View of a Hexagonal Arcitecture"
   :ct [{:ref :ddd/container}
        {:ref :ddd/database-container}
        {:ref :ddd/queue-container}

        {:ref :ddd/application-logic-uses-domain-core}
        {:ref :ddd/application-logic-uses-repository-component}
        {:ref :ddd/provided-interface-component-calls-application-logic}
        {:ref :ddd/application-logic-calls-consumed-interface-component}
        {:ref :ddd/incoming-domain-events-triggers-application-logic}
        {:ref :ddd/application-logic-sends-outgoing-domain-events}]}
  ;
  }